{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tempered","text":""},{"location":"#adding-templates","title":"Adding templates","text":"<pre><code>import components\nfrom tempered import Tempered\n\ntempered = Tempered(\n    template_folder=\"./templates\",\n) # Initial Creationg\n\ntempered.add_template_folder(\"./templates\")\ntempered.add_template(\"./templates/comment.html\")\ntempered.add_template_from_string(\"comment.html\", \"\"\"\n    {% param text: str %}\n    &lt;span&gt;{{ text }}&lt;/span&gt;\n\"\"\")\n</code></pre>"},{"location":"#type-generating","title":"Type Generating","text":"<p>By default, tempered will create a dynamic type stubs file alongside the libraries files. This is dynamically updated to fit the currently encoded templates. It enabled IDEs to provide autocomplete on templates names as well as.</p> <p>However, this may not play well with some IDEs. Additionally, it increases build times and uses IO to write the stubs file, it's recommended to disabled in production.</p> <p>It can be disabled by adding <code>generate_types=False</code> to the Tempered constructor.</p> <pre><code>Tempered(generate_types=False)\n</code></pre>"},{"location":"#performance","title":"Performance","text":"<p>If you want to increase build performance: install <code>lxml</code>.</p> <p>This allows the HTML to parsed much faster and increases build times by 10-30%. However it requires C build tools and is not available on all platforms. If <code>lxml</code> installed, Tempered will use it by default.</p>"},{"location":"#grammar","title":"Grammar","text":"<p>The formal grammar specified in Extended Backus-Naur Form and can be found here.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#even-and-odd-table","title":"Even and Odd Table","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;div class=\"table\"&gt;\n    {% for x in range(10) %}\n        {% if x % 2 == 0 %}\n            &lt;div class=\"row even\"&gt;\n                {{x}}\n            &lt;/div&gt;\n        {% else %}\n            &lt;div class=\"row odd\"&gt;\n                {{x}}\n            &lt;/div&gt;\n        {% endif %}\n    {% endfor %}\n&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;style&gt;\n    .table {\n        width: 500px;\n        height: fit-content;\n        border: solid black 1px;\n\n        display: flex;\n        flex-flow: column nowrap;\n    }\n\n    .row {\n        width: 100%;\n        color: black;\n        text-align: center;\n    }\n    .row.even { background: #FAFAFF; }\n    .row.odd { background: #DADDD8; }\n&lt;/style&gt;\n&lt;/html&gt;\n</code></pre> 0 1 2 3 4 5 6 7 8 9"},{"location":"templating/","title":"Templates","text":"<p>Tempered templates are based on Jinja with several modifications.</p> <pre><code>{% layout \"layout.html\" %}\n{% param text: str %}\n&lt;div&gt;\n    {text}\n&lt;/div&gt;\n</code></pre>"},{"location":"templating/#template-tags","title":"Template Tags","text":""},{"location":"templating/#expression","title":"Expression","text":"<p>Use <code>{{ EXPR }}</code> for expressions,</p> <p><pre><code>&lt;span&gt;{{ text }}&lt;/span&gt;\n</code></pre> These are escaped in HTML and tag parameters, so they are protected against XSS</p> <pre><code>&lt;a src=\"{{src}}\"&gt; &lt;!-- This is safe --&gt;\n    {{ text }}  &lt;!-- And so is this --&gt;\n&lt;/a&gt;\n</code></pre> <p>Important: Ensure you surround attributes in quotes <code>\"</code> to prevent XSS</p> <p><code>&lt;a href=\"{{src}}\"/&gt;</code> is safe</p> <p><code>&lt;a href={{src}}/&gt;</code> is unsafe</p>"},{"location":"templating/#if","title":"<code>{% if %}</code>","text":"<p>Use <code>{% if %}</code> and <code>{% endif %}</code> for control flow, there are two control flow structures</p> <pre><code>{% param link: str | None = None %}\n\n{% if link %}\n    &lt;a href=\"{{link}}\"&gt;\n        Link\n    &lt;/a&gt;\n{% endif %}\n</code></pre> <p>You can also have an else block</p> <pre><code>{% param src: str | None = None %}\n\n{% if src %}\n    &lt;img src=\"{{src}}\" alt=\"\"/&gt;\n{% else %}\n    &lt;img src=\"/images/missing.png\" alt=\"\"/&gt;\n{% endif %}\n</code></pre> <p>As well as elif blocks</p> <pre><code>{% param number: int %}\n\n&lt;span&gt;\n    {% if number &lt; 10 %}\n        {{ number }} is less than 10\n    {% elif number &lt; 100 %}\n        {{ number }} is less than 100\n    {% elif number &lt; 1000 %}\n        {{ number }} is less than 1000\n    {% else %}\n        {{ number }} is bigger than 1000\n    {% endif %}\n&lt;/span&gt;\n</code></pre>"},{"location":"templating/#for","title":"<code>{% for %}</code>","text":"<p>Use <code>{% for %}</code></p> <pre><code>{% param commments: list[str] %}\n\n{% for comment in comments %}\n    &lt;span&gt;\n        {{ comment }}\n    &lt;/span&gt;\n{% endfor %}\n</code></pre> <pre><code>{%param commments: list[str] }\n\n&lt;ul&gt;\n{% for x in range(10) %}\n    &lt;li&gt;{{x}}&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre>"},{"location":"templating/#html","title":"<code>{% html %}</code>","text":"<p>Use <code>{% html %}</code> to include literal html without escaping</p> <pre><code>{%param markdown_html: str %}\n&lt;div&gt;\n    {% html markdown_html %}\n&lt;/div&gt;\n</code></pre>"},{"location":"templating/#param","title":"<code>{% param %}</code>","text":"<p>Use <code>{% param %}</code> for parameters</p> <pre><code>{% param a %}\n{% param b: list %}\n{% param c = 2 %}\n{% param d: str = \"A\" %}\n{% param e: t.Optional[str, None] = None %} &lt;!-- Advanced Typing--&gt;\n</code></pre> <p>Note: typing_extensions is imported as t and can be used in parameters</p>"},{"location":"templating/#component","title":"<code>{% component %}</code>","text":"<p>Use <code>{% component Component() %}</code> for a component, call this like:</p> <pre><code>{% import Post from \"post.html\" %}\n\n&lt;div&gt;\n    {% component Post(title=\"Lorum Ipsum\") %}\n&lt;/div&gt;\n</code></pre>"},{"location":"templating/#import","title":"<code>{% import %}</code>","text":"<p>You have to import components using the import syntax. You can specify any target name.</p> <pre><code>{% import ANY_NAME from \"template_name.html\" %}\n</code></pre>"},{"location":"templating/#set","title":"<code>{% set %}</code>","text":"<p>Use <code>{% set %}</code> to set a variable</p> <pre><code>&lt;div&gt;\n    {% set title = post.title.lower() %}\n&lt;/div&gt;\n</code></pre>"},{"location":"templating/#styles","title":"<code>{% styles %}</code>","text":"<p>Use <code>{% styles %}</code> for styles, this is where styles are placed</p> <pre><code>&lt;head&gt;\n    {% styles %}\n&lt;/head&gt;\n</code></pre> <p>If omitted, styles are placed at the end of the component</p>"},{"location":"templating/#include","title":"<code>{% include %}</code>","text":"<p>You can manually include a seperate components styles using <code>include</code>, should be placed at the top of the component. This treats the target component as a depedency.</p> <pre><code>{% include \"post.html\" %}\n\n&lt;head&gt;\n    {% styles %}\n&lt;/head&gt;\n</code></pre> <p>You shouldn't have to do this normally, only if your dynamically adding a component through javascript such as with HTMX.</p>"},{"location":"templating/#styles_1","title":"Styles","text":"<p>Anything placed in style tags is transformed into the componenets CSS. <pre><code>&lt;div&gt;\n    Hello\n&lt;/div&gt;\n&lt;style&gt;\n    div {\n        height: 10rem;\n        width: 10rem;\n        text-align: center;\n        justify-text: center;\n    }\n&lt;/style&gt;\n</code></pre></p>"},{"location":"templating/#scoping","title":"Scoping","text":"<p>Style tags are automatically converted into CSS, By default css is scoped per component, this means you don't have to worry CSS name collisions. This is done by applying a component specific class to each</p> <p>Watch you, you cannot place dynamic attributes in the CSS, this is becuase CSS is shared per component</p>"},{"location":"templating/#global","title":"Global","text":"<p>If you want to disable CSS scoping, you can place a global attribute on your style tag.</p> <pre><code>&lt;style global&gt;\n    html {\n        --text: #262626;\n        --background: #ededed;\n        --primary: #91c0c0;\n        --secondary: #d5d5e7;\n        --accent: #579898;\n        --error: #FD2929;\n    }\n&lt;/style&gt;\n</code></pre>"},{"location":"templating/#with_styles","title":"<code>with_styles</code>","text":"<p>If you want to use a component without including it's styles, you can use the <code>with_styles</code> parameter to prevent include the CSS. This is useful for when you place components into a page using AJAX/HTMX.</p> <pre><code>tempered.render_template(\"partial.html\", with_styles=False)\n</code></pre>"},{"location":"templating/#sass","title":"Sass","text":"<p>If you want to use sass, you can declare it on a style tag with <code>lang=\"scss\"</code> or <code>lang=\"sass\"</code> to get sass or scss respectively</p> <pre><code>&lt;style lang=\"scss\"&gt;\n    a {\n        b {\n            color: red;\n        }\n    }\n&lt;/style&gt;\n\n&lt;style lang=\"sass\"&gt;\n    a\n        b\n            color: red\n&lt;/style&gt;\n</code></pre> <p><code>a b {color: red;}</code></p>"}]}